@{
    ViewData["Title"] = "Správa vyřešeného testu " + @ViewBag.deliveryExecutionIdentifier;

    (string testNameIdentifier, string testNumberIdentifier, string title, int amountOfItems) = LoadTestParameters();
    ItemController itemController = new ItemController();
}

@{

    List<(string, string, string, string)> questionList = LoadQuestions();
    List<(string, string, string, string, int, bool)> itemParameters = LoadItemInfo();
    (int testPoints, bool testPointsDetermined) = GetTestPoints(itemParameters);
    List<(double questionResultPoints, bool questionResultPointsDetermined)> studentsPoints = GetQuestionResultPoints(itemParameters);
    double totalStudentsPoints = GetTotalStudentsPoints(studentsPoints);
    (string resultIdentifier, string resultTimestamp, string studentName, string studentLogin, string studentIdentifier) = LoadResultParameters();

}

@functions{
    ItemController itemController = new ItemController();

    public (string, string, string, int) LoadTestParameters()
    {
        string testNameIdentifier = @ViewBag.testNameIdentifier;
        string testNumberIdentifier = @ViewBag.testNumberIdentifier;
        string title = "";
        int amountOfItems = 0;

        XmlReader xmlReader = XmlReader.Create("C:\\xampp\\exported\\tests\\" + testNameIdentifier + "\\tests\\" + testNumberIdentifier + "\\test.xml");
        while (xmlReader.Read())
        {
            if ((xmlReader.NodeType == XmlNodeType.Element) && (xmlReader.Name == "assessmentTest"))
            {
                if (xmlReader.HasAttributes)
                {
                    title = xmlReader.GetAttribute("title");
                }
            }

            if (xmlReader.Name == "assessmentItemRef" && xmlReader.NodeType != XmlNodeType.EndElement)
            {
                amountOfItems++;
            }
        }
        return (testNameIdentifier, testNumberIdentifier, title, amountOfItems);
    }

    public List<(string, string, string, string)> LoadQuestions()
    {
        string testNameIdentifier = ViewBag.testNameIdentifier;
        string testNumberIdentifier = ViewBag.testNumberIdentifier;
        List<(string, string, string, string)> questionList = new List<(string, string, string, string)>();
        string testPart = "";
        string testSection = "";
        string itemNameIdentifier = "";
        string itemNumberIdentifier = "";

        XmlReader xmlReader = XmlReader.Create("C:\\xampp\\exported\\tests\\" + testNameIdentifier + "\\tests\\" + testNumberIdentifier + "\\test.xml");
        while (xmlReader.Read())
        {
            if(xmlReader.Name == "testPart")
            {
                testPart = xmlReader.GetAttribute("identifier");
            }

            if (xmlReader.Name == "assessmentSection")
            {
                testSection = xmlReader.GetAttribute("identifier");
            }

            if (xmlReader.Name == "assessmentItemRef" && xmlReader.NodeType != XmlNodeType.EndElement)
            {
                itemNameIdentifier = xmlReader.GetAttribute("identifier");
                string itemNumberIdentifierToSplit = xmlReader.GetAttribute("href");
                string[] itemNumberIdentifierSplitBySlash = itemNumberIdentifierToSplit.Split(@"/");
                itemNumberIdentifier = itemNumberIdentifierSplitBySlash[3];
                questionList.Add((testPart, testSection, itemNameIdentifier, itemNumberIdentifier));
            }
        }

        return questionList;
    }

    public List<(string, string, string, string, int, bool)> LoadItemInfo()//Jiné než v původní appce, načte seznam parametrů všech itemů
    {
        string title = "";
        string label = "";
        string itemNumberIdenfifier = "";
        string itemNameIdenfifier = "";
        int i = 0;
        List<(string, string, string, string, int, bool)> itemParametersTemp = new List<(string, string, string, string, int, bool)>();
        List<(string, string, string, string)> questionList = LoadQuestions();
        bool testPointsDetermined = false;
        int testPoints = 0;

        foreach (var directory in Directory.GetDirectories("C:\\xampp\\exported\\tests\\" + @ViewBag.testNameIdentifier + "\\items\\"))
        {
            foreach (var file in Directory.GetFiles(directory))
            {
                string[] fileSplitBySlash = file.Split(@"\");
                if(fileSplitBySlash[fileSplitBySlash.Length - 1] != "qti.xml")
                {
                    continue;
                }
                else
                {
                    XmlReader xmlReader = XmlReader.Create(file);
                    while (xmlReader.Read())
                    {
                        if (xmlReader.NodeType == XmlNodeType.Element && xmlReader.HasAttributes)
                        {
                            if (xmlReader.Name == "assessmentItem")
                            {
                                for(int j = 0; j < questionList.Count; j++)
                                {
                                    if(questionList[j].Item4 == xmlReader.GetAttribute("identifier"))
                                    {
                                        itemNumberIdenfifier = questionList[j].Item4;
                                        itemNameIdenfifier = questionList[j].Item3;
                                        title = xmlReader.GetAttribute("title");
                                        label = xmlReader.GetAttribute("label");
                                        (int questionPoints, bool questionPointsDetermined) = GetQuestionPoints(itemNumberIdenfifier);

                                        itemParametersTemp.Add((itemNumberIdenfifier, itemNameIdenfifier, title, label, questionPoints, questionPointsDetermined));
                                        i++;
                                    }
                                }
                            }
                        }
                    }                    
                }
            }
        }

        //pole nyní může být ve špatném pořadí kvůli jinému pořadí v rámci qti.xml celého testu a složek ve složce items - oprava
        List<(string, string, string, string, int, bool)> itemParameters = new List<(string, string, string, string, int, bool)>();
        for(int k = 0; k < questionList.Count; k++)
        {
            for(int l = 0; l < itemParametersTemp.Count; l++)
            {
                if(questionList[k].Item4 == itemParametersTemp[l].Item1)
                {
                    itemParameters.Add(itemParametersTemp[l]);
                }
            }
        }

        return itemParameters;
    }

    public (int, bool) GetQuestionPoints(string itemNumberIdenfifier)
    {
        bool questionPointsDetermined = false;
        int questionPoints = 0;
        string itemParentPath = "C:\\xampp\\exported\\tests\\" + @ViewBag.testNameIdentifier + "\\items\\" + itemNumberIdenfifier;

        foreach (var file in Directory.GetFiles(itemParentPath))
        {
            if (ExtractFileName(file) == "Points.txt")
            {
                questionPointsDetermined = true;
            }
        }

        if(questionPointsDetermined)
        {
            string[] importedFileLines = File.ReadAllLines(itemParentPath + "\\Points.txt");
            for (int j = 0; j < importedFileLines.Length; j++)
            {
                string[] splitImportedFileLineBySemicolon = importedFileLines[j].Split(";");

                if (splitImportedFileLineBySemicolon[1] == "N/A")
                {
                    questionPointsDetermined = false;
                }
                else
                {
                    questionPoints += int.Parse(splitImportedFileLineBySemicolon[1]);
                }
            }
        }

        return (questionPoints, questionPointsDetermined);
    }

    public(int, bool) GetTestPoints(List<(string, string, string, string, int, bool)> itemParameters)
    {
        int testPoints = 0;
        bool testPointsDetermined = true;

        for(int i = 0; i < itemParameters.Count; i++)
        {
            testPoints += itemParameters[i].Item5;
            if(!itemParameters[i].Item6)
            {
                testPointsDetermined = false;
            }
        }

        return (testPoints, testPointsDetermined);
    }

    public string ExtractFileName(string file)
    {
        string[] fileSplitBySlash = file.Split(@"\");
        return fileSplitBySlash[fileSplitBySlash.Length - 1];
    }

    public (string, string, string, string, string) LoadResultParameters()
    {
        string resultTimestamp = "";
        string login = "", name = "", surname = "";

        XmlReader xmlReader = XmlReader.Create("C:\\xampp\\exported\\results\\" + @ViewBag.testNameIdentifier + "\\delivery_execution_" + @ViewBag.deliveryExecutionIdentifier + ".xml");
        while (xmlReader.Read())
        {
            if(xmlReader.Name == "testResult" && xmlReader.NodeType != XmlNodeType.EndElement)
            {
                resultTimestamp = xmlReader.GetAttribute("datestamp");
            }
        }

        foreach (var file in Directory.GetFiles("C:\\xampp\\exported\\testtakers"))
        {
            string extension = ExtractFileExtension(file);
            if (extension == "rdf")
            {
                IGraph g = new Graph();
                FileLoader.Load(g, file);
                IEnumerable<INode> nodes = g.AllNodes;
                int nodeLine = 1;
                foreach (INode node in nodes)
                {
                    if (nodeLine == 1)
                    {
                        string[] splitByHashtag = node.ToString().Split("#");
                        if(splitByHashtag[1] != @ViewBag.studentIdentifier)
                        {
                            break;
                        }
                    }
                    if (nodeLine == 3)
                    {
                        login = node.ToString();
                    }
                    else if (nodeLine == 9)
                    {
                        name = node.ToString();
                    }
                    else if (nodeLine == 11)
                    {
                        surname = node.ToString();
                    }
                    nodeLine++;
                }
            }
        }

        return (@ViewBag.deliveryExecutionIdentifier, resultTimestamp, name + " " + surname, login, @ViewBag.studentIdentifier);
    }

    public string ExtractFileExtension(string file)
    {
        string[] fileSplitByDot = file.Split(@".");
        return fileSplitByDot[fileSplitByDot.Length - 1];
    }

    public List<(double, bool)> GetQuestionResultPoints(List<(string, string, string, string, int, bool)> itemParameters)
    {
        List<(double, bool)> studentsAnswerPoints = new List<(double, bool)>();
        string resultsFilePath = "C:\\xampp\\exported\\results\\" + @ViewBag.testNameIdentifier + "\\delivery_execution_" + @ViewBag.deliveryExecutionIdentifier + "Results.txt";
        bool resultsFileExists = false;

        foreach (var file in Directory.GetFiles("C:\\xampp\\exported\\results\\" + @ViewBag.testNameIdentifier))
        {
            if (file == resultsFilePath)
            {
                resultsFileExists = true;
            }
        }

        if(!resultsFileExists)
        {
            int errorMessageNumber = itemController.CreateNewResultPointsFile(@ViewBag.testNameIdentifier, @ViewBag.testNumberIdentifier, @ViewBag.deliveryExecutionIdentifier, itemParameters);
            if(errorMessageNumber == 1)
            {
                string errorMessage = "Chyba: otázka nemá pravděpodobně zadaný žádný text";
                WriteMessageToUser(errorMessage);
            }
        }
        for(int i = 0; i < itemParameters.Count; i++)
        {
            string itemNameIdentifier = itemParameters[i].Item2;
            double totalReceivedPoints = 0;
            string[] resultsFileLines = File.ReadAllLines("C:\\xampp\\exported\\results\\" + @ViewBag.testNameIdentifier + "\\delivery_execution_" + @ViewBag.deliveryExecutionIdentifier + "Results.txt");
            for (int j = 0; j < resultsFileLines.Length; j++)
            {
                string[] splitResultsFileLineBySemicolon = resultsFileLines[j].Split(";");
                if (splitResultsFileLineBySemicolon[0] == itemNameIdentifier)
                {
                    for (int k = 1; k < splitResultsFileLineBySemicolon.Length; k++)
                    {
                        //   importedReceivedPointsArray.Add(double.Parse(splitResultsFileLineBySemicolon[j]));
                        totalReceivedPoints += double.Parse(splitResultsFileLineBySemicolon[k]);
                    }
                    studentsAnswerPoints.Add((totalReceivedPoints, true));
                }
            }
        }

        return studentsAnswerPoints;

    }

    public double GetTotalStudentsPoints(List<(double, bool)> studentsPoints)
    {
        double totalStudentsPoints = 0;
        for(int i = 0; i < studentsPoints.Count; i++)
        {
            totalStudentsPoints += studentsPoints[i].Item1;
        }
        return totalStudentsPoints;
    }

    public void WriteMessageToUser(string message)
    {
        <script>
        window.alert('@message');
        </script>
    }

}

<h1>@ViewData["Title"]</h1>

<div class="managesolvedtest-to-managesolvedtestlist"><a asp-area="" asp-controller="Home" asp-action="ManageSolvedTestList">Zpět</a></div>

<div class="managesolvedtest-test-parameters">
    Parametry testu:
    <br>
    Jmenný identifikátor testu: @testNameIdentifier
    <br>
    Číselný identifikátor testu: @testNumberIdentifier
    <br>
    Nadpis: @title
    <br>
    Počet otázek: @amountOfItems
    <br>
    @{
        if(@testPointsDetermined)
        {
            <label>Počet bodů: @totalStudentsPoints / @testPoints</label>
        }
        else
        {
            <label>Počet bodů: N/A</label>
        }
    }
</div>

<div class="testtemplate-questionlist">
    Seznam otázek:
    <table class="table table-bordered">
        <tr>
            <th>Část testu</th>
            <th>Sekce testu</th>
            <th>Jmenný identifikátor otázky</th>
            <th>Číselný identifikátor otázky</th>
            <th>Počet bodů</th>
            <th>Detaily otázky</th>
            <th>Správa otázky</th>
        </tr>
        @{
            int i = 0;
            foreach ((string, string, string, string) question in questionList)
            {
                string points = "";
                if(!(@itemParameters[i].Item6))
                {
                    points = "N/A";
                }
                else
                {
                    points = @studentsPoints[i].Item1 + "/" + @itemParameters[i].Item5.ToString();
                }
                <tr>
                    <td>@question.Item1</td>
                    <td>@question.Item2</td>
                    <td>@question.Item3</td>
                    <td>@question.Item4</td>
                    <td>@points</td>
                    <td><button class="item-details-button" id="@i" onclick="loadQuestionInfo('@itemParameters[i].Item1', '@itemParameters[i].Item2', '@itemParameters[i].Item3', '@itemParameters[i].Item4', '@studentsPoints[i].Item1 / @itemParameters[i].Item5', '@itemParameters[i].Item6')">Detaily otázky</button></td>
                    <td><button class="managesolvedtest-to-managesolveditem"><a asp-area="" asp-controller="Home" asp-action="ManageSolvedItem"
                    asp-route-testNameIdentifier="@testNameIdentifier"
                    asp-route-testNumberIdentifier="@testNumberIdentifier"
                    asp-route-itemNumberIdentifier="@itemParameters[i].Item1"
                    asp-route-itemNameIdentifier="@itemParameters[i].Item2"
                    asp-route-deliveryExecutionIdentifier="@ViewBag.deliveryExecutionIdentifier"
                    asp-route-studentIdentifier="@ViewBag.studentIdentifier">Správa otázky</a></button></td>
                </tr>
                i++;
            }
        }
    </table>
</div>

<div class="testtemplate-item-parameters">
    Parametry otázky:
    <br>
    <div id="testtemplate-item-itemnumberidentifier">Číselný identifikátor otázky:</div>
    <br>
    <div id="testtemplate-item-itemnameidentifier">Jmenný identifikátor otázky:</div>
    <br>
    <div id="testtemplate-item-title">Nadpis otázky:</div>
    <br>
    <div id="testtemplate-item-label">Označení otázky:</div>
    <br>
    <div id="testtemplate-item-points">Počet bodů za otázku:</div>
</div>

<div class="managesolvedtest-result-parameters">
    Parametry testu:
    <br>
    Identifikátor pokusu: @resultIdentifier
    <br>
    Časová známka: @resultTimestamp
    <br>
    Jméno studenta: @studentName
    <br>
    Login studenta: @studentLogin
    <br>
    Identifikátor studenta: @studentIdentifier
</div>