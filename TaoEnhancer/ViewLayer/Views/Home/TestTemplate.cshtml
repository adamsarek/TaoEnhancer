@{
    ViewData["Title"] = "Test: " + @ViewBag.testNameIdentifier;

    (string testNameIdentifier, string testNumberIdentifier, string title, int amountOfItems) = LoadTestParameters();
}

@{
    List<(string, string, string, string)> questionList = LoadQuestions();
    List<(string, string, string, string, int, bool)> itemParameters = LoadItemInfo();
    (int testPoints, bool testPointsDetermined) = GetTestPoints(itemParameters);

    bool negativePoints = NegativePointsManagement();
}

@functions{

    public (string, string, string, int) LoadTestParameters()
    {
        string testNameIdentifier = @ViewBag.testNameIdentifier;
        string testNumberIdentifier = @ViewBag.testNumberIdentifier;
        string title = "";
        int amountOfItems = 0;

        XmlReader xmlReader = XmlReader.Create("C:\\xampp\\exported\\tests\\" + testNameIdentifier + "\\tests\\" + testNumberIdentifier + "\\test.xml");
        while (xmlReader.Read())
        {
            if ((xmlReader.NodeType == XmlNodeType.Element) && (xmlReader.Name == "assessmentTest"))
            {
                if (xmlReader.HasAttributes)
                {
                    title = xmlReader.GetAttribute("title");
                }
            }

            if (xmlReader.Name == "assessmentItemRef" && xmlReader.NodeType != XmlNodeType.EndElement)
            {
                amountOfItems++;
            }
        }
        return (testNameIdentifier, testNumberIdentifier, title, amountOfItems);
    }

    public List<(string, string, string, string)> LoadQuestions()
    {
        string testNameIdentifier = ViewBag.testNameIdentifier;
        string testNumberIdentifier = ViewBag.testNumberIdentifier;
        List<(string, string, string, string)> questionList = new List<(string, string, string, string)>();
        string testPart = "";
        string testSection = "";
        string itemNameIdentifier = "";
        string itemNumberIdentifier = "";

        XmlReader xmlReader = XmlReader.Create("C:\\xampp\\exported\\tests\\" + testNameIdentifier + "\\tests\\" + testNumberIdentifier + "\\test.xml");
        while (xmlReader.Read())
        {
            if(xmlReader.Name == "testPart")
            {
                testPart = xmlReader.GetAttribute("identifier");
            }

            if (xmlReader.Name == "assessmentSection")
            {
                testSection = xmlReader.GetAttribute("identifier");
            }

            if (xmlReader.Name == "assessmentItemRef" && xmlReader.NodeType != XmlNodeType.EndElement)
            {
                itemNameIdentifier = xmlReader.GetAttribute("identifier");
                string itemNumberIdentifierToSplit = xmlReader.GetAttribute("href");
                string[] itemNumberIdentifierSplitBySlash = itemNumberIdentifierToSplit.Split(@"/");
                itemNumberIdentifier = itemNumberIdentifierSplitBySlash[3];
                questionList.Add((testPart, testSection, itemNameIdentifier, itemNumberIdentifier));
            }
        }

        return questionList;
    }

    public List<(string, string, string, string, int, bool)> LoadItemInfo()//Jiné než v původní appce, načte seznam parametrů všech itemů
    {
        string title = "";
        string label = "";
        string itemNumberIdenfifier = "";
        string itemNameIdenfifier = "";
        int i = 0;
        List<(string, string, string, string, int, bool)> itemParametersTemp = new List<(string, string, string, string, int, bool)>();
        List<(string, string, string, string)> questionList = LoadQuestions();
        bool testPointsDetermined = false;
        int testPoints = 0;

        foreach (var directory in Directory.GetDirectories("C:\\xampp\\exported\\tests\\" + @ViewBag.testNameIdentifier + "\\items\\"))
        {
            foreach (var file in Directory.GetFiles(directory))
            {
                string[] fileSplitBySlash = file.Split(@"\");
                if(fileSplitBySlash[fileSplitBySlash.Length - 1] != "qti.xml")
                {
                    continue;
                }
                else
                {
                    XmlReader xmlReader = XmlReader.Create(file);
                    while (xmlReader.Read())
                    {
                        if (xmlReader.NodeType == XmlNodeType.Element && xmlReader.HasAttributes)
                        {
                            if (xmlReader.Name == "assessmentItem")
                            {
                                for(int j = 0; j < questionList.Count; j++)
                                {
                                    if(questionList[j].Item4 == xmlReader.GetAttribute("identifier"))
                                    {
                                        itemNumberIdenfifier = questionList[j].Item4;
                                        itemNameIdenfifier = questionList[j].Item3;
                                        title = xmlReader.GetAttribute("title");
                                        label = xmlReader.GetAttribute("label");
                                        (int questionPoints, bool questionPointsDetermined) = GetQuestionPoints(itemNumberIdenfifier);

                                        itemParametersTemp.Add((itemNumberIdenfifier, itemNameIdenfifier, title, label, questionPoints, questionPointsDetermined));
                                        i++;
                                    }
                                }
                            }
                        }
                    }                    
                }
            }
        }

        //pole nyní může být ve špatném pořadí kvůli jinému pořadí v rámci qti.xml celého testu a složek ve složce items - oprava
        List<(string, string, string, string, int, bool)> itemParameters = new List<(string, string, string, string, int, bool)>();
        for(int k = 0; k < questionList.Count; k++)
        {
            for(int l = 0; l < itemParametersTemp.Count; l++)
            {
                if(questionList[k].Item4 == itemParametersTemp[l].Item1)
                {
                    itemParameters.Add(itemParametersTemp[l]);
                }
            }
        }

        return itemParameters;
    }

    public (int, bool) GetQuestionPoints(string itemNumberIdenfifier)
    {
        bool questionPointsDetermined = false;
        int questionPoints = 0;
        string itemParentPath = "C:\\xampp\\exported\\tests\\" + @ViewBag.testNameIdentifier + "\\items\\" + itemNumberIdenfifier;

        foreach (var file in Directory.GetFiles(itemParentPath))
        {
            if (ExtractFileName(file) == "Points.txt")
            {
                questionPointsDetermined = true;
            }
        }

        if(questionPointsDetermined)
        {
            string[] importedFileLines = File.ReadAllLines(itemParentPath + "\\Points.txt");
            for (int j = 0; j < importedFileLines.Length; j++)
            {
                string[] splitImportedFileLineBySemicolon = importedFileLines[j].Split(";");

                if (splitImportedFileLineBySemicolon[1] == "N/A")
                {
                    questionPointsDetermined = false;
                }
                else
                {
                    questionPoints += int.Parse(splitImportedFileLineBySemicolon[1]);
                }
            }
        }

        return (questionPoints, questionPointsDetermined);
    }

    public(int, bool) GetTestPoints(List<(string, string, string, string, int, bool)> itemParameters)
    {
        int testPoints = 0;
        bool testPointsDetermined = true;

        for(int i = 0; i < itemParameters.Count; i++)
        {
            testPoints += itemParameters[i].Item5;
            if(!itemParameters[i].Item6)
            {
                testPointsDetermined = false;
            }
        }

        return (testPoints, testPointsDetermined);
    }

    public bool NegativePointsManagement()
    {
        bool negativePointsInTest = false;
        bool fileExists = false;
        string testPath = "C:\\xampp\\exported\\tests\\" + @ViewBag.testNameIdentifier + "\\tests\\" + @ViewBag.testNumberIdentifier;

        foreach (var file in Directory.GetFiles(testPath))
        {
            if (ExtractFileName(file) == "NegativePoints.txt")
            {
                fileExists = true;
                string[] negativePointsFileLines = File.ReadAllLines(file);
                for (int i = 0; i < negativePointsFileLines.Length; i++)
                {
                    if (negativePointsFileLines[0] == "1")
                    {
                        negativePointsInTest = true;
                    }
                }
            }
        }

        if (!fileExists)
        {
            File.WriteAllText(testPath + "\\NegativePoints.txt", "0");
        }

        return negativePointsInTest;
    }

    public string ExtractFileName(string file)
    {
        string[] fileSplitBySlash = file.Split(@"\");
        return fileSplitBySlash[fileSplitBySlash.Length - 1];
    }
}

<h1>@ViewData["Title"]</h1>

<div class="testtemplate-to-testlist"><a asp-area="" asp-controller="Home" asp-action="TestList">Zpět</a></div>

<div class="testtemplate-test-parameters">
    Parametry testu:
    <br>
    Jmenný identifikátor testu: @testNameIdentifier
    <br>
    Číselný identifikátor testu: @testNumberIdentifier
    <br>
    Nadpis: @title
    <br>
    Počet otázek: @amountOfItems
    <br>
    @{
        if(@testPointsDetermined)
        {
            <label>Počet bodů: @testPoints</label>
        }
        else
        {
            <label>Počet bodů: N/A</label>
        }
    }
</div>

<div class="testtemplate-questionlist">
    Seznam otázek:
    <table class="table table-bordered">
        <tr>
            <th>Část testu</th>
            <th>Sekce testu</th>
            <th>Jmenný identifikátor otázky</th>
            <th>Číselný identifikátor otázky</th>
            <th>Počet bodů</th>
            <th>Detaily otázky</th>
            <th>Správa otázky</th>
        </tr>
        @{
            int i = 0;
            foreach ((string, string, string, string) question in questionList)
            {
                <tr>
                    <td>@question.Item1</td>
                    <td>@question.Item2</td>
                    <td>@question.Item3</td>
                    <td>@question.Item4</td>
                    <td>TODO</td>
                    <td><button class="item-details-button" id="@i" onclick="loadQuestionInfo('@itemParameters[i].Item1', '@itemParameters[i].Item2', '@itemParameters[i].Item3', '@itemParameters[i].Item4', '@itemParameters[i].Item5', '@itemParameters[i].Item6')">Detaily otázky</button></td>
                    <td><button class="testtemplate-to-itemtemplate"><a asp-area="" asp-controller="Home" asp-action="ItemTemplate"
                    asp-route-testNameIdentifier="@testNameIdentifier"
                    asp-route-testNumberIdentifier="@testNumberIdentifier"
                    asp-route-itemNumberIdentifier="@itemParameters[i].Item1"
                    asp-route-itemNameIdentifier="@itemParameters[i].Item2">Správa otázky</a></button></td>
                </tr>
                i++;
            }
        }
    </table>
</div>

<div class="testtemplate-item-parameters">
    Parametry otázky:
    <br>
    <div id="testtemplate-item-itemnumberidentifier">Číselný identifikátor otázky:</div>
    <br>
    <div id="testtemplate-item-itemnameidentifier">Jmenný identifikátor otázky:</div>
    <br>
    <div id="testtemplate-item-title">Nadpis otázky:</div>
    <br>
    <div id="testtemplate-item-label">Označení otázky:</div>
    <br>
    <div id="testtemplate-item-points">Počet bodů za otázku:</div>
</div>

<form method="POST" class="testtemplate-negative-points">
    @{
        if(@ViewBag.negativePoints != null)
        {
            <label>Změny úspěšně uloženy</label>
            <br>
            string negativePointsSaved = "";
            if(@ViewBag.negativePoints == "negativePoints_no")
            {
                negativePointsSaved = "(záporné body jsou nyní pouze v rámci otázky)";
            }
            else if(@ViewBag.negativePoints == "negativePoints_yes")
            {
                negativePointsSaved = "(záporné body jsou nyní v rámci testu)";
            }
            <label>@negativePointsSaved</label>
            <br>
        }
    }
    <input type="hidden" value="@testNameIdentifier" name="testNameIdentifier">
    <input type="hidden" value="@testNumberIdentifier" name="testNumberIdentifier">
    Záporné body:
    <br>
    <input type="radio" id="negativePoints_no" value="negativePoints_no" name="negativePoints">
    <label for="negativePoints_no">Záporné body pouze v rámci otázky</label><br>
    <input type="radio" id="negativePoints_yes" value="negativePoints_yes" name="negativePoints">
    <label for="negativePoints_yes">Záporné body i v rámci testu</label><br>
    <input class="testtemplate-negative-points-button" type="submit" value="Uložit">
</form>

@{
    if(!negativePoints)
    {
        <script>
            document.getElementById("negativePoints_no").checked = true;
        </script>
    }
    else
    {
        <script>
            document.getElementById("negativePoints_yes").checked = true;
        </script>
    }
}
